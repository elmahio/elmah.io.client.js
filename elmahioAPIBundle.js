var elmahioAPI =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Deployment = {
    serializedName: "Deployment",
    type: {
        name: "Composite",
        className: "Deployment",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            },
            created: {
                serializedName: "created",
                type: {
                    name: "DateTime"
                }
            },
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            userName: {
                serializedName: "userName",
                type: {
                    name: "String"
                }
            },
            userEmail: {
                serializedName: "userEmail",
                type: {
                    name: "String"
                }
            },
            logId: {
                serializedName: "logId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
exports.CreateDeployment = {
    serializedName: "CreateDeployment",
    type: {
        name: "Composite",
        className: "CreateDeployment",
        modelProperties: {
            version: {
                required: true,
                serializedName: "version",
                type: {
                    name: "String"
                }
            },
            created: {
                serializedName: "created",
                type: {
                    name: "DateTime"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            userName: {
                serializedName: "userName",
                type: {
                    name: "String"
                }
            },
            userEmail: {
                serializedName: "userEmail",
                type: {
                    name: "String"
                }
            },
            logId: {
                serializedName: "logId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
exports.Log = {
    serializedName: "Log",
    type: {
        name: "Composite",
        className: "Log",
        modelProperties: {
            id: {
                serializedName: "Id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "Name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
exports.CreateLog = {
    serializedName: "CreateLog",
    type: {
        name: "Composite",
        className: "CreateLog",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
exports.Item = {
    serializedName: "Item",
    type: {
        name: "Composite",
        className: "Item",
        modelProperties: {
            key: {
                serializedName: "key",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
exports.MessageOverview = {
    serializedName: "MessageOverview",
    type: {
        name: "Composite",
        className: "MessageOverview",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            application: {
                serializedName: "application",
                type: {
                    name: "String"
                }
            },
            detail: {
                serializedName: "detail",
                type: {
                    name: "String"
                }
            },
            hostname: {
                serializedName: "hostname",
                type: {
                    name: "String"
                }
            },
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            },
            source: {
                serializedName: "source",
                type: {
                    name: "String"
                }
            },
            statusCode: {
                serializedName: "statusCode",
                type: {
                    name: "Number"
                }
            },
            dateTime: {
                serializedName: "dateTime",
                type: {
                    name: "DateTime"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            user: {
                serializedName: "user",
                type: {
                    name: "String"
                }
            },
            severity: {
                serializedName: "severity",
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                type: {
                    name: "String"
                }
            },
            method: {
                serializedName: "method",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            },
            cookies: {
                serializedName: "cookies",
                type: {
                    name: "Sequence",
                    element: {
                        serializedName: "ItemElementType",
                        type: {
                            name: "Composite",
                            className: "Item"
                        }
                    }
                }
            },
            form: {
                serializedName: "form",
                type: {
                    name: "Sequence",
                    element: {
                        serializedName: "ItemElementType",
                        type: {
                            name: "Composite",
                            className: "Item"
                        }
                    }
                }
            },
            queryString: {
                serializedName: "queryString",
                type: {
                    name: "Sequence",
                    element: {
                        serializedName: "ItemElementType",
                        type: {
                            name: "Composite",
                            className: "Item"
                        }
                    }
                }
            },
            serverVariables: {
                serializedName: "serverVariables",
                type: {
                    name: "Sequence",
                    element: {
                        serializedName: "ItemElementType",
                        type: {
                            name: "Composite",
                            className: "Item"
                        }
                    }
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Sequence",
                    element: {
                        serializedName: "ItemElementType",
                        type: {
                            name: "Composite",
                            className: "Item"
                        }
                    }
                }
            }
        }
    }
};
exports.MessagesResult = {
    serializedName: "MessagesResult",
    type: {
        name: "Composite",
        className: "MessagesResult",
        modelProperties: {
            messages: {
                serializedName: "messages",
                type: {
                    name: "Sequence",
                    element: {
                        serializedName: "MessageOverviewElementType",
                        type: {
                            name: "Composite",
                            className: "MessageOverview"
                        }
                    }
                }
            },
            total: {
                serializedName: "total",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
exports.Search = {
    serializedName: "Search",
    type: {
        name: "Composite",
        className: "Search",
        modelProperties: {
            query: {
                serializedName: "Query",
                type: {
                    name: "String"
                }
            },
            from: {
                serializedName: "From",
                type: {
                    name: "DateTime"
                }
            },
            to: {
                serializedName: "To",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
exports.CreateMessage = {
    serializedName: "CreateMessage",
    type: {
        name: "Composite",
        className: "CreateMessage",
        modelProperties: {
            application: {
                serializedName: "application",
                type: {
                    name: "String"
                }
            },
            detail: {
                serializedName: "detail",
                type: {
                    name: "String"
                }
            },
            hostname: {
                serializedName: "hostname",
                type: {
                    name: "String"
                }
            },
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            },
            source: {
                serializedName: "source",
                type: {
                    name: "String"
                }
            },
            statusCode: {
                serializedName: "statusCode",
                type: {
                    name: "Number"
                }
            },
            dateTime: {
                serializedName: "dateTime",
                type: {
                    name: "DateTime"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            user: {
                serializedName: "user",
                type: {
                    name: "String"
                }
            },
            severity: {
                serializedName: "severity",
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                type: {
                    name: "String"
                }
            },
            method: {
                serializedName: "method",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            },
            cookies: {
                serializedName: "cookies",
                type: {
                    name: "Sequence",
                    element: {
                        serializedName: "ItemElementType",
                        type: {
                            name: "Composite",
                            className: "Item"
                        }
                    }
                }
            },
            form: {
                serializedName: "form",
                type: {
                    name: "Sequence",
                    element: {
                        serializedName: "ItemElementType",
                        type: {
                            name: "Composite",
                            className: "Item"
                        }
                    }
                }
            },
            queryString: {
                serializedName: "queryString",
                type: {
                    name: "Sequence",
                    element: {
                        serializedName: "ItemElementType",
                        type: {
                            name: "Composite",
                            className: "Item"
                        }
                    }
                }
            },
            serverVariables: {
                serializedName: "serverVariables",
                type: {
                    name: "Sequence",
                    element: {
                        serializedName: "ItemElementType",
                        type: {
                            name: "Composite",
                            className: "Item"
                        }
                    }
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Sequence",
                    element: {
                        serializedName: "ItemElementType",
                        type: {
                            name: "Composite",
                            className: "Item"
                        }
                    }
                }
            }
        }
    }
};
exports.Message = {
    serializedName: "Message",
    type: {
        name: "Composite",
        className: "Message",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            application: {
                serializedName: "application",
                type: {
                    name: "String"
                }
            },
            detail: {
                serializedName: "detail",
                type: {
                    name: "String"
                }
            },
            hostname: {
                serializedName: "hostname",
                type: {
                    name: "String"
                }
            },
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            },
            source: {
                serializedName: "source",
                type: {
                    name: "String"
                }
            },
            statusCode: {
                serializedName: "statusCode",
                type: {
                    name: "Number"
                }
            },
            dateTime: {
                serializedName: "dateTime",
                type: {
                    name: "DateTime"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            user: {
                serializedName: "user",
                type: {
                    name: "String"
                }
            },
            severity: {
                serializedName: "severity",
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                type: {
                    name: "String"
                }
            },
            method: {
                serializedName: "method",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            },
            cookies: {
                serializedName: "cookies",
                type: {
                    name: "Sequence",
                    element: {
                        serializedName: "ItemElementType",
                        type: {
                            name: "Composite",
                            className: "Item"
                        }
                    }
                }
            },
            form: {
                serializedName: "form",
                type: {
                    name: "Sequence",
                    element: {
                        serializedName: "ItemElementType",
                        type: {
                            name: "Composite",
                            className: "Item"
                        }
                    }
                }
            },
            queryString: {
                serializedName: "queryString",
                type: {
                    name: "Sequence",
                    element: {
                        serializedName: "ItemElementType",
                        type: {
                            name: "Composite",
                            className: "Item"
                        }
                    }
                }
            },
            serverVariables: {
                serializedName: "serverVariables",
                type: {
                    name: "Sequence",
                    element: {
                        serializedName: "ItemElementType",
                        type: {
                            name: "Composite",
                            className: "Item"
                        }
                    }
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Sequence",
                    element: {
                        serializedName: "ItemElementType",
                        type: {
                            name: "Composite",
                            className: "Item"
                        }
                    }
                }
            }
        }
    }
};
exports.MessagesGetAllOptionalParams = {
    serializedName: "GetAllOptions",
    type: {
        name: "Composite",
        className: "MessagesGetAllOptionalParams",
        modelProperties: {
            pageIndex: {
                serializedName: "pageIndex",
                type: {
                    name: "Number"
                }
            },
            pageSize: {
                serializedName: "pageSize",
                type: {
                    name: "Number"
                }
            },
            query: {
                serializedName: "query",
                type: {
                    name: "String"
                }
            },
            from: {
                serializedName: "from",
                type: {
                    name: "DateTime"
                }
            },
            to: {
                serializedName: "to",
                type: {
                    name: "DateTime"
                }
            },
            includeHeaders: {
                serializedName: "includeHeaders",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = msRest;

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["__extends"] = __extends;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (immutable) */ __webpack_exports__["__rest"] = __rest;
/* harmony export (immutable) */ __webpack_exports__["__decorate"] = __decorate;
/* harmony export (immutable) */ __webpack_exports__["__param"] = __param;
/* harmony export (immutable) */ __webpack_exports__["__metadata"] = __metadata;
/* harmony export (immutable) */ __webpack_exports__["__awaiter"] = __awaiter;
/* harmony export (immutable) */ __webpack_exports__["__generator"] = __generator;
/* harmony export (immutable) */ __webpack_exports__["__exportStar"] = __exportStar;
/* harmony export (immutable) */ __webpack_exports__["__values"] = __values;
/* harmony export (immutable) */ __webpack_exports__["__read"] = __read;
/* harmony export (immutable) */ __webpack_exports__["__spread"] = __spread;
/* harmony export (immutable) */ __webpack_exports__["__await"] = __await;
/* harmony export (immutable) */ __webpack_exports__["__asyncGenerator"] = __asyncGenerator;
/* harmony export (immutable) */ __webpack_exports__["__asyncDelegator"] = __asyncDelegator;
/* harmony export (immutable) */ __webpack_exports__["__asyncValues"] = __asyncValues;
/* harmony export (immutable) */ __webpack_exports__["__makeTemplateObject"] = __makeTemplateObject;
/* harmony export (immutable) */ __webpack_exports__["__importStar"] = __importStar;
/* harmony export (immutable) */ __webpack_exports__["__importDefault"] = __importDefault;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Models = __webpack_require__(4);
exports.ElmahioAPIModels = Models;
const Mappers = __webpack_require__(0);
exports.ElmahioAPIMappers = Mappers;
const operations = __webpack_require__(5);
const elmahioAPIContext_1 = __webpack_require__(9);
class ElmahioAPI extends elmahioAPIContext_1.ElmahioAPIContext {
    /**
     * @class
     * Initializes a new instance of the ElmahioAPI class.
     * @constructor
     *
     * @param {string} [baseUri] - The base URI of the service.
     *
     * @param {object} [options] - The parameter options
     *
     * @param {Array} [options.filters] - Filters to be added to the request pipeline
     *
     * @param {object} [options.requestOptions] - The request options. Detailed info can be found at
     * {@link https://github.github.io/fetch/#Request Options doc}
     *
     * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
     *
     */
    constructor(credentials, baseUri, options) {
        super(credentials, baseUri, options);
        this.deployments = new operations.Deployments(this);
        this.logs = new operations.Logs(this);
        this.messages = new operations.Messages(this);
    }
}
exports.ElmahioAPI = ElmahioAPI;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const deployments_1 = __webpack_require__(6);
exports.Deployments = deployments_1.Deployments;
const logs_1 = __webpack_require__(7);
exports.Logs = logs_1.Logs;
const messages_1 = __webpack_require__(8);
exports.Messages = messages_1.Messages;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(2);
const msRest = __webpack_require__(1);
const Mappers = __webpack_require__(0);
const WebResource = msRest.WebResource;
/** Class representing a Deployments. */
class Deployments {
    /**
     * Create a Deployments.
     * @param {ElmahioAPIContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * @summary Fetch a list of deployments.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAllWithHttpOperationResponse(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({}, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: this.client.baseUri,
                    path: "v3/deployments"
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200 && statusCode !== 402) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            const resultMapper = {
                                serializedName: "parsedResponse",
                                type: {
                                    name: "Sequence",
                                    element: {
                                        serializedName: "DeploymentElementType",
                                        type: {
                                            name: "Composite",
                                            className: "Deployment"
                                        }
                                    }
                                }
                            };
                            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Create a new deployment.
     *
     * @param {CreateDeployment} deployment The deployment object to create.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(deployment, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Validate
            try {
                if (deployment === null || deployment === undefined) {
                    throw new Error('deployment cannot be null or undefined.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    deployment
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "POST",
                    baseUrl: this.client.baseUri,
                    path: "v3/deployments",
                    requestBodyMapper: Mappers.CreateDeployment,
                    requestBodyName: "deployment",
                    contentType: "application/json; charset=utf-8"
                });
                let statusCode = operationRes.status;
                if (statusCode !== 201 && statusCode !== 400 && statusCode !== 402 && statusCode !== 409) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Fetch a deployment by its ID.
     *
     * @param {string} id The ID of the deployment to fetch.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(id, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Validate
            try {
                if (id === null || id === undefined || typeof id.valueOf() !== 'string') {
                    throw new Error('id cannot be null or undefined and it must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    id
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: this.client.baseUri,
                    path: "v3/deployments/{id}",
                    urlParameters: [
                        {
                            parameterName: "id",
                            mapper: {
                                required: true,
                                serializedName: "id",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200 && statusCode !== 400 && statusCode !== 402 && statusCode !== 404) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            const resultMapper = Mappers.Deployment;
                            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Delete a deployment by its ID.
     *
     * This endpoint doesn't clear the version number of messages already annotated
     * with this deployment version.
     *
     * @param {string} id The ID of the deployment to delete.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(id, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Validate
            try {
                if (id === null || id === undefined || typeof id.valueOf() !== 'string') {
                    throw new Error('id cannot be null or undefined and it must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    id
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "DELETE",
                    baseUrl: this.client.baseUri,
                    path: "v3/deployments/{id}",
                    urlParameters: [
                        {
                            parameterName: "id",
                            mapper: {
                                required: true,
                                serializedName: "id",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 204 && statusCode !== 400 && statusCode !== 402 && statusCode !== 404) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    getAll(options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getAllWithHttpOperationResponse(options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getAllWithHttpOperationResponse(options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    create(deployment, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.createWithHttpOperationResponse(deployment, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.createWithHttpOperationResponse(deployment, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    get(id, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(id, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getWithHttpOperationResponse(id, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    deleteMethod(id, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(id, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(id, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
}
exports.Deployments = Deployments;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(2);
const msRest = __webpack_require__(1);
const Mappers = __webpack_require__(0);
const WebResource = msRest.WebResource;
/** Class representing a Logs. */
class Logs {
    /**
     * Create a Logs.
     * @param {ElmahioAPIContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * @summary Fetch a list of logs.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAllWithHttpOperationResponse(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({}, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: this.client.baseUri,
                    path: "v3/logs"
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200 && statusCode !== 401 && statusCode !== 402) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            const resultMapper = {
                                serializedName: "parsedResponse",
                                type: {
                                    name: "Sequence",
                                    element: {
                                        serializedName: "LogElementType",
                                        type: {
                                            name: "Composite",
                                            className: "Log"
                                        }
                                    }
                                }
                            };
                            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Create a new log.
     *
     * @param {CreateLog} log The log object to create.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(log, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Validate
            try {
                if (log === null || log === undefined) {
                    throw new Error('log cannot be null or undefined.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    log
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "POST",
                    baseUrl: this.client.baseUri,
                    path: "v3/logs",
                    requestBodyMapper: Mappers.CreateLog,
                    requestBodyName: "log",
                    contentType: "application/json; charset=utf-8"
                });
                let statusCode = operationRes.status;
                if (statusCode !== 201 && statusCode !== 401 && statusCode !== 402) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Fetch a log by its ID.
     *
     * @param {string} id The ID of the log to fetch.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(id, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Validate
            try {
                if (id === null || id === undefined || typeof id.valueOf() !== 'string') {
                    throw new Error('id cannot be null or undefined and it must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    id
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: this.client.baseUri,
                    path: "v3/logs/{id}",
                    urlParameters: [
                        {
                            parameterName: "id",
                            mapper: {
                                required: true,
                                serializedName: "id",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200 && statusCode !== 401 && statusCode !== 402 && statusCode !== 404) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            const resultMapper = Mappers.Log;
                            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    getAll(options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getAllWithHttpOperationResponse(options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getAllWithHttpOperationResponse(options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    create(log, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.createWithHttpOperationResponse(log, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.createWithHttpOperationResponse(log, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    get(id, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(id, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getWithHttpOperationResponse(id, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
}
exports.Logs = Logs;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(2);
const msRest = __webpack_require__(1);
const Mappers = __webpack_require__(0);
const WebResource = msRest.WebResource;
/** Class representing a Messages. */
class Messages {
    /**
     * Create a Messages.
     * @param {ElmahioAPIContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * @summary Fetch messages from a log.
     *
     * @param {string} logId The ID of the log containing the messages.
     *
     * @param {MessagesGetAllOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAllWithHttpOperationResponse(logId, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let pageIndex = (options && options.pageIndex !== undefined) ? options.pageIndex : undefined;
            let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
            let query = (options && options.query !== undefined) ? options.query : undefined;
            let from = (options && options.from !== undefined) ? options.from : undefined;
            let to = (options && options.to !== undefined) ? options.to : undefined;
            let includeHeaders = (options && options.includeHeaders !== undefined) ? options.includeHeaders : undefined;
            // Validate
            try {
                if (logId === null || logId === undefined || typeof logId.valueOf() !== 'string') {
                    throw new Error('logId cannot be null or undefined and it must be of type string.');
                }
                if (pageIndex !== null && pageIndex !== undefined && typeof pageIndex !== 'number') {
                    throw new Error('pageIndex must be of type number.');
                }
                if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
                    throw new Error('pageSize must be of type number.');
                }
                if (query !== null && query !== undefined && typeof query.valueOf() !== 'string') {
                    throw new Error('query must be of type string.');
                }
                if (from && !(from instanceof Date ||
                    (typeof from.valueOf() === 'string' && !isNaN(Date.parse(from))))) {
                    throw new Error('from must be of type date.');
                }
                if (to && !(to instanceof Date ||
                    (typeof to.valueOf() === 'string' && !isNaN(Date.parse(to))))) {
                    throw new Error('to must be of type date.');
                }
                if (includeHeaders !== null && includeHeaders !== undefined && typeof includeHeaders !== 'boolean') {
                    throw new Error('includeHeaders must be of type boolean.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    logId,
                    pageIndex,
                    pageSize,
                    query,
                    from,
                    to,
                    includeHeaders
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: this.client.baseUri,
                    path: "v3/messages/{logId}",
                    urlParameters: [
                        {
                            parameterName: "logId",
                            mapper: {
                                required: true,
                                serializedName: "logId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "pageIndex",
                            mapper: {
                                serializedName: "pageIndex",
                                type: {
                                    name: "Number"
                                }
                            }
                        },
                        {
                            parameterName: "pageSize",
                            mapper: {
                                serializedName: "pageSize",
                                type: {
                                    name: "Number"
                                }
                            }
                        },
                        {
                            parameterName: "query",
                            mapper: {
                                serializedName: "query",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "from",
                            mapper: {
                                serializedName: "from",
                                type: {
                                    name: "DateTime"
                                }
                            }
                        },
                        {
                            parameterName: "to",
                            mapper: {
                                serializedName: "to",
                                type: {
                                    name: "DateTime"
                                }
                            }
                        },
                        {
                            parameterName: "includeHeaders",
                            mapper: {
                                serializedName: "includeHeaders",
                                type: {
                                    name: "Boolean"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200 && statusCode !== 400 && statusCode !== 401 && statusCode !== 429) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            const resultMapper = Mappers.MessagesResult;
                            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Create a new message.
     *
     * @param {string} logId The ID of the log which should contain the new
     * message.
     *
     * @param {CreateMessage} message The message object to create.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(logId, message, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Validate
            try {
                if (logId === null || logId === undefined || typeof logId.valueOf() !== 'string') {
                    throw new Error('logId cannot be null or undefined and it must be of type string.');
                }
                if (message === null || message === undefined) {
                    throw new Error('message cannot be null or undefined.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    logId,
                    message
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "POST",
                    baseUrl: this.client.baseUri,
                    path: "v3/messages/{logId}",
                    urlParameters: [
                        {
                            parameterName: "logId",
                            mapper: {
                                required: true,
                                serializedName: "logId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    requestBodyMapper: Mappers.CreateMessage,
                    requestBodyName: "message",
                    contentType: "application/json; charset=utf-8"
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200 && statusCode !== 201 && statusCode !== 400 && statusCode !== 401 && statusCode !== 403 && statusCode !== 404 && statusCode !== 413 && statusCode !== 429) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Deletes a list of messages by logid and query.
     *
     * @param {string} logId The ID of the log containing the message.
     *
     * @param {Search} search A search object containing query, time filters etc.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAllWithHttpOperationResponse(logId, search, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Validate
            try {
                if (logId === null || logId === undefined || typeof logId.valueOf() !== 'string') {
                    throw new Error('logId cannot be null or undefined and it must be of type string.');
                }
                if (search === null || search === undefined) {
                    throw new Error('search cannot be null or undefined.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    logId,
                    search
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "DELETE",
                    baseUrl: this.client.baseUri,
                    path: "v3/messages/{logId}",
                    urlParameters: [
                        {
                            parameterName: "logId",
                            mapper: {
                                required: true,
                                serializedName: "logId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    requestBodyMapper: Mappers.Search,
                    requestBodyName: "search",
                    contentType: "application/json; charset=utf-8"
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200 && statusCode !== 400 && statusCode !== 401 && statusCode !== 404 && statusCode !== 429) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Fetch a message by its ID.
     *
     * @param {string} id The ID of the message to fetch.
     *
     * @param {string} logId The ID of the log containing the message.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(id, logId, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Validate
            try {
                if (id === null || id === undefined || typeof id.valueOf() !== 'string') {
                    throw new Error('id cannot be null or undefined and it must be of type string.');
                }
                if (logId === null || logId === undefined || typeof logId.valueOf() !== 'string') {
                    throw new Error('logId cannot be null or undefined and it must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    id,
                    logId
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: this.client.baseUri,
                    path: "v3/messages/{logId}/{id}",
                    urlParameters: [
                        {
                            parameterName: "id",
                            mapper: {
                                required: true,
                                serializedName: "id",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "logId",
                            mapper: {
                                required: true,
                                serializedName: "logId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200 && statusCode !== 400 && statusCode !== 401 && statusCode !== 404 && statusCode !== 429) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            const resultMapper = Mappers.Message;
                            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Delete a message by its ID.
     *
     * @param {string} id The ID of the message to delete.
     *
     * @param {string} logId The ID of the log containing the message.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(id, logId, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Validate
            try {
                if (id === null || id === undefined || typeof id.valueOf() !== 'string') {
                    throw new Error('id cannot be null or undefined and it must be of type string.');
                }
                if (logId === null || logId === undefined || typeof logId.valueOf() !== 'string') {
                    throw new Error('logId cannot be null or undefined and it must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    id,
                    logId
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "DELETE",
                    baseUrl: this.client.baseUri,
                    path: "v3/messages/{logId}/{id}",
                    urlParameters: [
                        {
                            parameterName: "id",
                            mapper: {
                                required: true,
                                serializedName: "id",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "logId",
                            mapper: {
                                required: true,
                                serializedName: "logId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200 && statusCode !== 400 && statusCode !== 401 && statusCode !== 404 && statusCode !== 429) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Hide a message by its ID.
     *
     * @param {string} id The ID of the message to hide.
     *
     * @param {string} logId The ID of the log containing the message.
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    hideWithHttpOperationResponse(id, logId, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            // Validate
            try {
                if (id === null || id === undefined || typeof id.valueOf() !== 'string') {
                    throw new Error('id cannot be null or undefined and it must be of type string.');
                }
                if (logId === null || logId === undefined || typeof logId.valueOf() !== 'string') {
                    throw new Error('logId cannot be null or undefined and it must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    id,
                    logId
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "POST",
                    baseUrl: this.client.baseUri,
                    path: "v3/messages/{logId}/{id}/_hide",
                    urlParameters: [
                        {
                            parameterName: "id",
                            mapper: {
                                required: true,
                                serializedName: "id",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "logId",
                            mapper: {
                                required: true,
                                serializedName: "logId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200 && statusCode !== 400 && statusCode !== 401 && statusCode !== 404 && statusCode !== 429) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    getAll(logId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getAllWithHttpOperationResponse(logId, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getAllWithHttpOperationResponse(logId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    create(logId, message, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.createWithHttpOperationResponse(logId, message, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.createWithHttpOperationResponse(logId, message, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    deleteAll(logId, search, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.deleteAllWithHttpOperationResponse(logId, search, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.deleteAllWithHttpOperationResponse(logId, search, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    get(id, logId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(id, logId, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getWithHttpOperationResponse(id, logId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    deleteMethod(id, logId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(id, logId, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(id, logId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    hide(id, logId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.hideWithHttpOperationResponse(id, logId, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.hideWithHttpOperationResponse(id, logId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
}
exports.Messages = Messages;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = __webpack_require__(1);
const Mappers = __webpack_require__(0);
const packageName = "elmah.io.client.js";
const packageVersion = "3.0.0";
class ElmahioAPIContext extends msRest.ServiceClient {
    /**
     * @class
     * Initializes a new instance of the ElmahioAPIContext class.
     * @constructor
     *
     * @param {msRest.ServiceClientCredentials} credentials - Subscription credentials which uniquely identify client subscription.
     *
     * @param {string} [baseUri] - The base URI of the service.
     *
     * @param {object} [options] - The parameter options
     *
     * @param {Array} [options.filters] - Filters to be added to the request pipeline
     *
     * @param {object} [options.requestOptions] - The request options. Detailed info can be found at
     * {@link https://github.github.io/fetch/#Request Options doc}
     *
     * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
     *
     */
    constructor(credentials, baseUri, options) {
        if (credentials === null || credentials === undefined) {
            throw new Error('\'credentials\' cannot be null.');
        }
        if (!options) {
            options = {};
        }
        if (!options.serializer) {
            options = Object.assign({}, options, { serializer: new msRest.Serializer(Mappers, false) });
        }
        super(credentials, options);
        this.baseUri = baseUri;
        if (!this.baseUri) {
            this.baseUri = "https://api.elmah.io";
        }
        this.credentials = credentials;
        this.addUserAgentInfo(`${packageName}/${packageVersion}`);
        this.serializer = new msRest.Serializer(Mappers, false);
    }
}
exports.ElmahioAPIContext = ElmahioAPIContext;


/***/ })
/******/ ]);
//# sourceMappingURL=elmahioAPIBundle.js.map