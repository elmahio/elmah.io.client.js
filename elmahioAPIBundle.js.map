{"version":3,"sources":["webpack:///webpack/bootstrap 6b7fbf562e068667e507","webpack:///./lib/models/mappers.ts","webpack:///external \"msRest\"","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./lib/elmahioAPI.ts","webpack:///./lib/models/index.ts","webpack:///./lib/operations/index.ts","webpack:///./lib/operations/deployments.ts","webpack:///./lib/operations/logs.ts","webpack:///./lib/operations/messages.ts","webpack:///./lib/elmahioAPIContext.ts"],"names":[],"mappings":"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","file":"elmahioAPIBundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6b7fbf562e068667e507","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\n\nexport const Deployment = {\n  serializedName: \"Deployment\",\n  type: {\n    name: \"Composite\",\n    className: \"Deployment\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      created: {\n        serializedName: \"created\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      createdBy: {\n        serializedName: \"createdBy\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      userName: {\n        serializedName: \"userName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      userEmail: {\n        serializedName: \"userEmail\",\n        type: {\n          name: \"String\"\n        }\n      },\n      logId: {\n        serializedName: \"logId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CreateDeployment = {\n  serializedName: \"CreateDeployment\",\n  type: {\n    name: \"Composite\",\n    className: \"CreateDeployment\",\n    modelProperties: {\n      version: {\n        required: true,\n        serializedName: \"version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      created: {\n        serializedName: \"created\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      userName: {\n        serializedName: \"userName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      userEmail: {\n        serializedName: \"userEmail\",\n        type: {\n          name: \"String\"\n        }\n      },\n      logId: {\n        serializedName: \"logId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Log = {\n  serializedName: \"Log\",\n  type: {\n    name: \"Composite\",\n    className: \"Log\",\n    modelProperties: {\n      id: {\n        serializedName: \"Id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CreateLog = {\n  serializedName: \"CreateLog\",\n  type: {\n    name: \"Composite\",\n    className: \"CreateLog\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Item = {\n  serializedName: \"Item\",\n  type: {\n    name: \"Composite\",\n    className: \"Item\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MessageOverview = {\n  serializedName: \"MessageOverview\",\n  type: {\n    name: \"Composite\",\n    className: \"MessageOverview\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      application: {\n        serializedName: \"application\",\n        type: {\n          name: \"String\"\n        }\n      },\n      detail: {\n        serializedName: \"detail\",\n        type: {\n          name: \"String\"\n        }\n      },\n      hostname: {\n        serializedName: \"hostname\",\n        type: {\n          name: \"String\"\n        }\n      },\n      title: {\n        serializedName: \"title\",\n        type: {\n          name: \"String\"\n        }\n      },\n      source: {\n        serializedName: \"source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      statusCode: {\n        serializedName: \"statusCode\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      dateTime: {\n        serializedName: \"dateTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      user: {\n        serializedName: \"user\",\n        type: {\n          name: \"String\"\n        }\n      },\n      severity: {\n        serializedName: \"severity\",\n        type: {\n          name: \"String\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      },\n      method: {\n        serializedName: \"method\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cookies: {\n        serializedName: \"cookies\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ItemElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Item\"\n            }\n          }\n        }\n      },\n      form: {\n        serializedName: \"form\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ItemElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Item\"\n            }\n          }\n        }\n      },\n      queryString: {\n        serializedName: \"queryString\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ItemElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Item\"\n            }\n          }\n        }\n      },\n      serverVariables: {\n        serializedName: \"serverVariables\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ItemElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Item\"\n            }\n          }\n        }\n      },\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ItemElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Item\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MessagesResult = {\n  serializedName: \"MessagesResult\",\n  type: {\n    name: \"Composite\",\n    className: \"MessagesResult\",\n    modelProperties: {\n      messages: {\n        serializedName: \"messages\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"MessageOverviewElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"MessageOverview\"\n            }\n          }\n        }\n      },\n      total: {\n        serializedName: \"total\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Search = {\n  serializedName: \"Search\",\n  type: {\n    name: \"Composite\",\n    className: \"Search\",\n    modelProperties: {\n      query: {\n        serializedName: \"Query\",\n        type: {\n          name: \"String\"\n        }\n      },\n      from: {\n        serializedName: \"From\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      to: {\n        serializedName: \"To\",\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const CreateMessage = {\n  serializedName: \"CreateMessage\",\n  type: {\n    name: \"Composite\",\n    className: \"CreateMessage\",\n    modelProperties: {\n      application: {\n        serializedName: \"application\",\n        type: {\n          name: \"String\"\n        }\n      },\n      detail: {\n        serializedName: \"detail\",\n        type: {\n          name: \"String\"\n        }\n      },\n      hostname: {\n        serializedName: \"hostname\",\n        type: {\n          name: \"String\"\n        }\n      },\n      title: {\n        serializedName: \"title\",\n        type: {\n          name: \"String\"\n        }\n      },\n      source: {\n        serializedName: \"source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      statusCode: {\n        serializedName: \"statusCode\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      dateTime: {\n        serializedName: \"dateTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      user: {\n        serializedName: \"user\",\n        type: {\n          name: \"String\"\n        }\n      },\n      severity: {\n        serializedName: \"severity\",\n        type: {\n          name: \"String\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      },\n      method: {\n        serializedName: \"method\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cookies: {\n        serializedName: \"cookies\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ItemElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Item\"\n            }\n          }\n        }\n      },\n      form: {\n        serializedName: \"form\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ItemElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Item\"\n            }\n          }\n        }\n      },\n      queryString: {\n        serializedName: \"queryString\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ItemElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Item\"\n            }\n          }\n        }\n      },\n      serverVariables: {\n        serializedName: \"serverVariables\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ItemElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Item\"\n            }\n          }\n        }\n      },\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ItemElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Item\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Message = {\n  serializedName: \"Message\",\n  type: {\n    name: \"Composite\",\n    className: \"Message\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      application: {\n        serializedName: \"application\",\n        type: {\n          name: \"String\"\n        }\n      },\n      detail: {\n        serializedName: \"detail\",\n        type: {\n          name: \"String\"\n        }\n      },\n      hostname: {\n        serializedName: \"hostname\",\n        type: {\n          name: \"String\"\n        }\n      },\n      title: {\n        serializedName: \"title\",\n        type: {\n          name: \"String\"\n        }\n      },\n      source: {\n        serializedName: \"source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      statusCode: {\n        serializedName: \"statusCode\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      dateTime: {\n        serializedName: \"dateTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      user: {\n        serializedName: \"user\",\n        type: {\n          name: \"String\"\n        }\n      },\n      severity: {\n        serializedName: \"severity\",\n        type: {\n          name: \"String\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      },\n      method: {\n        serializedName: \"method\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cookies: {\n        serializedName: \"cookies\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ItemElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Item\"\n            }\n          }\n        }\n      },\n      form: {\n        serializedName: \"form\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ItemElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Item\"\n            }\n          }\n        }\n      },\n      queryString: {\n        serializedName: \"queryString\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ItemElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Item\"\n            }\n          }\n        }\n      },\n      serverVariables: {\n        serializedName: \"serverVariables\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ItemElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Item\"\n            }\n          }\n        }\n      },\n      data: {\n        serializedName: \"data\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            serializedName: \"ItemElementType\",\n            type: {\n              name: \"Composite\",\n              className: \"Item\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MessagesGetAllOptionalParams = {\n  serializedName: \"GetAllOptions\",\n  type: {\n    name: \"Composite\",\n    className: \"MessagesGetAllOptionalParams\",\n    modelProperties: {\n      pageIndex: {\n        serializedName: \"pageIndex\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      pageSize: {\n        serializedName: \"pageSize\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      query: {\n        serializedName: \"query\",\n        type: {\n          name: \"String\"\n        }\n      },\n      from: {\n        serializedName: \"from\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      to: {\n        serializedName: \"to\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      includeHeaders: {\n        serializedName: \"includeHeaders\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/models/mappers.ts","module.exports = msRest;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"msRest\"\n// module id = 1\n// module chunks = 0","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslib/tslib.es6.js\n// module id = 2\n// module chunks = 0","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as operations from \"./operations\";\nimport { ElmahioAPIContext } from \"./elmahioAPIContext\";\n\nclass ElmahioAPI extends ElmahioAPIContext {\n\n  // Operation groups\n  deployments: operations.Deployments;\n  logs: operations.Logs;\n  messages: operations.Messages;\n\n  /**\n   * @class\n   * Initializes a new instance of the ElmahioAPI class.\n   * @constructor\n   *\n   * @param {string} [baseUri] - The base URI of the service.\n   *\n   * @param {object} [options] - The parameter options\n   *\n   * @param {Array} [options.filters] - Filters to be added to the request pipeline\n   *\n   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at\n   * {@link https://github.github.io/fetch/#Request Options doc}\n   *\n   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy\n   *\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, baseUri?: string, options?: msRest.ServiceClientOptions) {\n    super(credentials, baseUri, options);\n    this.deployments = new operations.Deployments(this);\n    this.logs = new operations.Logs(this);\n    this.messages = new operations.Messages(this);\n  }\n}\n\nexport { ElmahioAPI, Models as ElmahioAPIModels, Mappers as ElmahioAPIMappers };\n\n\n\n// WEBPACK FOOTER //\n// ./lib/elmahioAPI.ts","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\n\n\n/**\n * @interface\n * An interface representing Deployment.\n */\nexport interface Deployment {\n  /**\n   * @member {string} [id] The ID of this deployment.\n   */\n  id?: string;\n  /**\n   * @member {string} [version] The version number of this deployment. The\n   * value of version can be a SemVer compliant string or any other\n   * syntax that you are using as your version numbering scheme.\n   */\n  version?: string;\n  /**\n   * @member {Date} [created] When was this deployment created.\n   */\n  created?: Date;\n  /**\n   * @member {string} [createdBy] The elmah.io id of the user creating this\n   * deployment. Since deployments are created on a subscription,\n   * the CreatedBy will contain the id of the user with the subscription.\n   */\n  createdBy?: string;\n  /**\n   * @member {string} [description] Sescription of this deployment in markdown\n   * or clear text.\n   */\n  description?: string;\n  /**\n   * @member {string} [userName] The name of the person responsible for\n   * creating this deployment.\n   */\n  userName?: string;\n  /**\n   * @member {string} [userEmail] The email of the person responsible for\n   * creating this deployment.\n   */\n  userEmail?: string;\n  /**\n   * @member {string} [logId] If the deployment is attached a single log, this\n   * property is set to the ID of that log.\n   * If null, the deployment is attached all logs on the organization.\n   */\n  logId?: string;\n}\n\n/**\n * @interface\n * An interface representing CreateDeployment.\n */\nexport interface CreateDeployment {\n  /**\n   * @member {string} version The version number of this deployment. The value\n   * of version can be a SemVer compliant string or any other\n   * syntax that you are using as your version numbering scheme.\n   */\n  version: string;\n  /**\n   * @member {Date} [created] When was this deployment created in UTC. Defaults\n   * to current time if not specified.\n   */\n  created?: Date;\n  /**\n   * @member {string} [description] Optional description of this deployment.\n   * Can be markdown or clear text.\n   */\n  description?: string;\n  /**\n   * @member {string} [userName] The name of the person responsible for\n   * creating this deployment. This can be the name taken from\n   * your deployment server (like VSTS or Octopus).\n   */\n  userName?: string;\n  /**\n   * @member {string} [userEmail] The email of the person responsible for\n   * creating this deployment. This can be the email taken from\n   * your deployment server (like VSTS or Octopus).\n   */\n  userEmail?: string;\n  /**\n   * @member {string} [logId] As default, deployments are attached all logs of\n   * the organization. If you want a deployment to\n   * attach to a single log only, set this to the ID of that log.\n   */\n  logId?: string;\n}\n\n/**\n * @interface\n * An interface representing Log.\n */\nexport interface Log {\n  /**\n   * @member {string} [id] ID of the log.\n   */\n  id?: string;\n  /**\n   * @member {string} [name] Name of the log.\n   */\n  name?: string;\n}\n\n/**\n * @interface\n * An interface representing CreateLog.\n */\nexport interface CreateLog {\n  /**\n   * @member {string} [name] Name of the new log.\n   */\n  name?: string;\n}\n\n/**\n * @interface\n * An interface representing Item.\n * Represents a key value pair.\n *\n */\nexport interface Item {\n  /**\n   * @member {string} [key] The key of the item.\n   */\n  key?: string;\n  /**\n   * @member {string} [value] The value of the item.\n   */\n  value?: string;\n}\n\n/**\n * @interface\n * An interface representing MessageOverview.\n */\nexport interface MessageOverview {\n  /**\n   * @member {string} [id] The ID of this message.\n   */\n  id?: string;\n  /**\n   * @member {string} [application] Used to identify which application logged\n   * this message. You can use this if you have multiple applications and\n   * services logging to the same log\n   */\n  application?: string;\n  /**\n   * @member {string} [detail] A longer description of the message. For errors\n   * this could be a stacktrace, but it's really up to you what to log in\n   * there.\n   */\n  detail?: string;\n  /**\n   * @member {string} [hostname] The hostname of the server logging the\n   * message.\n   */\n  hostname?: string;\n  /**\n   * @member {string} [title] The textual title or headline of the message to\n   * log.\n   */\n  title?: string;\n  /**\n   * @member {string} [source] The source of the code logging the message. This\n   * could be the assembly name.\n   */\n  source?: string;\n  /**\n   * @member {number} [statusCode] If the message logged relates to a HTTP\n   * status code, you can put the code in this property. This would probably\n   * only be relevant for errors,\n   * but could be used for logging successful status codes as well.\n   */\n  statusCode?: number;\n  /**\n   * @member {Date} [dateTime] The date and time in UTC of the message. If you\n   * don't provide us with a value in dateTime, we will set the current date\n   * and time in UTC.\n   */\n  dateTime?: Date;\n  /**\n   * @member {string} [type] The type of message. If logging an error, the type\n   * of the exception would go into type but you can put anything in there,\n   * that makes sense for your domain.\n   */\n  type?: string;\n  /**\n   * @member {string} [user] An identification of the user triggering this\n   * message. You can put the users email address or your user key into this\n   * property.\n   */\n  user?: string;\n  /**\n   * @member {string} [severity] An enum value representing the severity of\n   * this message. The following values are allowed: Verbose, Debug,\n   * Information, Warning, Error, Fatal\n   */\n  severity?: string;\n  /**\n   * @member {string} [url] If message relates to a HTTP request, you may send\n   * the URL of that request. If you don't provide us with an URL, we will try\n   * to find a key named URL in serverVariables.\n   */\n  url?: string;\n  /**\n   * @member {string} [method] If message relates to a HTTP request, you may\n   * send the HTTP method of that request. If you don't provide us with a\n   * method, we will try to find a key named REQUEST_METHOD in serverVariables.\n   */\n  method?: string;\n  /**\n   * @member {string} [version] Versions can be used to distinguish messages\n   * from different versions of your software. The value of version can be a\n   * SemVer compliant string or any other\n   * syntax that you are using as your version numbering scheme.\n   */\n  version?: string;\n  /**\n   * @member {Item[]} [cookies] A key/value pair of cookies. This property only\n   * makes sense for logging messages related to web requests.\n   */\n  cookies?: Item[];\n  /**\n   * @member {Item[]} [form] A key/value pair of form fields and their values.\n   * This property makes sense if logging message related to users inputting\n   * data in a form.\n   */\n  form?: Item[];\n  /**\n   * @member {Item[]} [queryString] A key/value pair of query string\n   * parameters. This property makes sense if logging message related to a HTTP\n   * request.\n   */\n  queryString?: Item[];\n  /**\n   * @member {Item[]} [serverVariables] A key/value pair of server values.\n   * Server variables are typically related to handling requests in a webserver\n   * but could be used for other types of information as well.\n   */\n  serverVariables?: Item[];\n  /**\n   * @member {Item[]} [data] A key/value pair of user-defined fields and their\n   * values. When logging an exception, the Data dictionary of\n   * the exception is copied to this property. You can add additional key/value\n   * pairs, by modifying the Data\n   * dictionary on the exception or by supplying additional key/values to this\n   * API.\n   */\n  data?: Item[];\n}\n\n/**\n * @interface\n * An interface representing MessagesResult.\n */\nexport interface MessagesResult {\n  /**\n   * @member {MessageOverview[]} [messages] Log messages.\n   */\n  messages?: MessageOverview[];\n  /**\n   * @member {number} [total] The total number of log messages found.\n   */\n  total?: number;\n}\n\n/**\n * @interface\n * An interface representing Search.\n */\nexport interface Search {\n  /**\n   * @member {string} [query] Lucene query.\n   */\n  query?: string;\n  /**\n   * @member {Date} [from] Search from this date.\n   */\n  from?: Date;\n  /**\n   * @member {Date} [to] Search to this date.\n   */\n  to?: Date;\n}\n\n/**\n * @interface\n * An interface representing CreateMessage.\n */\nexport interface CreateMessage {\n  /**\n   * @member {string} [application] Used to identify which application logged\n   * this message. You can use this if you have multiple applications and\n   * services logging to the same log\n   */\n  application?: string;\n  /**\n   * @member {string} [detail] A longer description of the message. For errors\n   * this could be a stacktrace, but it's really up to you what to log in\n   * there.\n   */\n  detail?: string;\n  /**\n   * @member {string} [hostname] The hostname of the server logging the\n   * message.\n   */\n  hostname?: string;\n  /**\n   * @member {string} [title] The textual title or headline of the message to\n   * log.\n   */\n  title?: string;\n  /**\n   * @member {string} [source] The source of the code logging the message. This\n   * could be the assembly name.\n   */\n  source?: string;\n  /**\n   * @member {number} [statusCode] If the message logged relates to a HTTP\n   * status code, you can put the code in this property. This would probably\n   * only be relevant for errors,\n   * but could be used for logging successful status codes as well.\n   */\n  statusCode?: number;\n  /**\n   * @member {Date} [dateTime] The date and time in UTC of the message. If you\n   * don't provide us with a value in dateTime, we will set the current date\n   * and time in UTC.\n   */\n  dateTime?: Date;\n  /**\n   * @member {string} [type] The type of message. If logging an error, the type\n   * of the exception would go into type but you can put anything in there,\n   * that makes sense for your domain.\n   */\n  type?: string;\n  /**\n   * @member {string} [user] An identification of the user triggering this\n   * message. You can put the users email address or your user key into this\n   * property.\n   */\n  user?: string;\n  /**\n   * @member {string} [severity] An enum value representing the severity of\n   * this message. The following values are allowed: Verbose, Debug,\n   * Information, Warning, Error, Fatal\n   */\n  severity?: string;\n  /**\n   * @member {string} [url] If message relates to a HTTP request, you may send\n   * the URL of that request. If you don't provide us with an URL, we will try\n   * to find a key named URL in serverVariables.\n   */\n  url?: string;\n  /**\n   * @member {string} [method] If message relates to a HTTP request, you may\n   * send the HTTP method of that request. If you don't provide us with a\n   * method, we will try to find a key named REQUEST_METHOD in serverVariables.\n   */\n  method?: string;\n  /**\n   * @member {string} [version] Versions can be used to distinguish messages\n   * from different versions of your software. The value of version can be a\n   * SemVer compliant string or any other\n   * syntax that you are using as your version numbering scheme.\n   */\n  version?: string;\n  /**\n   * @member {Item[]} [cookies] A key/value pair of cookies. This property only\n   * makes sense for logging messages related to web requests.\n   */\n  cookies?: Item[];\n  /**\n   * @member {Item[]} [form] A key/value pair of form fields and their values.\n   * This property makes sense if logging message related to users inputting\n   * data in a form.\n   */\n  form?: Item[];\n  /**\n   * @member {Item[]} [queryString] A key/value pair of query string\n   * parameters. This property makes sense if logging message related to a HTTP\n   * request.\n   */\n  queryString?: Item[];\n  /**\n   * @member {Item[]} [serverVariables] A key/value pair of server values.\n   * Server variables are typically related to handling requests in a webserver\n   * but could be used for other types of information as well.\n   */\n  serverVariables?: Item[];\n  /**\n   * @member {Item[]} [data] A key/value pair of user-defined fields and their\n   * values. When logging an exception, the Data dictionary of\n   * the exception is copied to this property. You can add additional key/value\n   * pairs, by modifying the Data\n   * dictionary on the exception or by supplying additional key/values to this\n   * API.\n   */\n  data?: Item[];\n}\n\n/**\n * @interface\n * An interface representing Message.\n */\nexport interface Message {\n  /**\n   * @member {string} [id] The ID of this message.\n   */\n  id?: string;\n  /**\n   * @member {string} [application] Used to identify which application logged\n   * this message. You can use this if you have multiple applications and\n   * services logging to the same log\n   */\n  application?: string;\n  /**\n   * @member {string} [detail] A longer description of the message. For errors\n   * this could be a stacktrace, but it's really up to you what to log in\n   * there.\n   */\n  detail?: string;\n  /**\n   * @member {string} [hostname] The hostname of the server logging the\n   * message.\n   */\n  hostname?: string;\n  /**\n   * @member {string} [title] The textual title or headline of the message to\n   * log.\n   */\n  title?: string;\n  /**\n   * @member {string} [source] The source of the code logging the message. This\n   * could be the assembly name.\n   */\n  source?: string;\n  /**\n   * @member {number} [statusCode] If the message logged relates to a HTTP\n   * status code, you can put the code in this property. This would probably\n   * only be relevant for errors,\n   * but could be used for logging successful status codes as well.\n   */\n  statusCode?: number;\n  /**\n   * @member {Date} [dateTime] The date and time in UTC of the message. If you\n   * don't provide us with a value in dateTime, we will set the current date\n   * and time in UTC.\n   */\n  dateTime?: Date;\n  /**\n   * @member {string} [type] The type of message. If logging an error, the type\n   * of the exception would go into type but you can put anything in there,\n   * that makes sense for your domain.\n   */\n  type?: string;\n  /**\n   * @member {string} [user] An identification of the user triggering this\n   * message. You can put the users email address or your user key into this\n   * property.\n   */\n  user?: string;\n  /**\n   * @member {string} [severity] An enum value representing the severity of\n   * this message. The following values are allowed: Verbose, Debug,\n   * Information, Warning, Error, Fatal\n   */\n  severity?: string;\n  /**\n   * @member {string} [url] If message relates to a HTTP request, you may send\n   * the URL of that request. If you don't provide us with an URL, we will try\n   * to find a key named URL in serverVariables.\n   */\n  url?: string;\n  /**\n   * @member {string} [method] If message relates to a HTTP request, you may\n   * send the HTTP method of that request. If you don't provide us with a\n   * method, we will try to find a key named REQUEST_METHOD in serverVariables.\n   */\n  method?: string;\n  /**\n   * @member {string} [version] Versions can be used to distinguish messages\n   * from different versions of your software. The value of version can be a\n   * SemVer compliant string or any other\n   * syntax that you are using as your version numbering scheme.\n   */\n  version?: string;\n  /**\n   * @member {Item[]} [cookies] A key/value pair of cookies. This property only\n   * makes sense for logging messages related to web requests.\n   */\n  cookies?: Item[];\n  /**\n   * @member {Item[]} [form] A key/value pair of form fields and their values.\n   * This property makes sense if logging message related to users inputting\n   * data in a form.\n   */\n  form?: Item[];\n  /**\n   * @member {Item[]} [queryString] A key/value pair of query string\n   * parameters. This property makes sense if logging message related to a HTTP\n   * request.\n   */\n  queryString?: Item[];\n  /**\n   * @member {Item[]} [serverVariables] A key/value pair of server values.\n   * Server variables are typically related to handling requests in a webserver\n   * but could be used for other types of information as well.\n   */\n  serverVariables?: Item[];\n  /**\n   * @member {Item[]} [data] A key/value pair of user-defined fields and their\n   * values. When logging an exception, the Data dictionary of\n   * the exception is copied to this property. You can add additional key/value\n   * pairs, by modifying the Data\n   * dictionary on the exception or by supplying additional key/values to this\n   * API.\n   */\n  data?: Item[];\n}\n\n/**\n * @interface\n * An interface representing MessagesGetAllOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface MessagesGetAllOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * @member {number} [pageIndex] The page number of the result.\n   */\n  pageIndex?: number;\n  /**\n   * @member {number} [pageSize] The number of messages to load (max 100) or 15\n   * if not set.\n   */\n  pageSize?: number;\n  /**\n   * @member {string} [query] A full-text or Lucene query to limit the messages\n   * by.\n   */\n  query?: string;\n  /**\n   * @member {Date} [from] A start date and time to search from (not included).\n   */\n  from?: Date;\n  /**\n   * @member {Date} [to] An end date and time to search to (not included).\n   */\n  to?: Date;\n  /**\n   * @member {boolean} [includeHeaders] Include headers like server variables\n   * and cookies in the result (slower).\n   */\n  includeHeaders?: boolean;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/models/index.ts","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport { Deployments } from \"./deployments\";\nimport { Logs } from \"./logs\";\nimport { Messages } from \"./messages\";\n\nexport { Deployments, Logs, Messages };\n\n\n\n// WEBPACK FOOTER //\n// ./lib/operations/index.ts","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/mappers\";\nimport { ElmahioAPIContext } from \"../elmahioAPIContext\";\n\nconst WebResource = msRest.WebResource;\n\n/** Class representing a Deployments. */\nexport class Deployments {\n  private readonly client: ElmahioAPIContext;\n  /**\n   * Create a Deployments.\n   * @param {ElmahioAPIContext} client Reference to the service client.\n   */\n  constructor(client: ElmahioAPIContext) {\n    this.client = client;\n  }\n\n  /**\n   * @summary Fetch a list of deployments.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async getAllWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Deployment[]>> {\n    let client = this.client;\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments({}, options);\n      operationRes = await client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.client.baseUri,\n          path: \"v3/deployments\"\n        });\n      let statusCode = operationRes.status;\n      if (statusCode !== 200 && statusCode !== 402) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = operationRes.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(operationRes);\n        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            let internalError = null;\n            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;\n            error.code = internalError ? internalError.code : parsedErrorResponse.code;\n            error.message = internalError ? internalError.message : parsedErrorResponse.message;\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            const resultMapper = {\n              serializedName: \"parsedResponse\",\n              type: {\n                name: \"Sequence\",\n                element: {\n                  serializedName: \"DeploymentElementType\",\n                  type: {\n                    name: \"Composite\",\n                    className: \"Deployment\"\n                  }\n                }\n              }\n            };\n            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Create a new deployment.\n   *\n   * @param {CreateDeployment} deployment The deployment object to create.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async createWithHttpOperationResponse(deployment: Models.CreateDeployment, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n    let client = this.client;\n    // Validate\n    try {\n      if (deployment === null || deployment === undefined) {\n        throw new Error('deployment cannot be null or undefined.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          deployment\n        },\n        options);\n      operationRes = await client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.client.baseUri,\n          path: \"v3/deployments\",\n          requestBodyMapper: Mappers.CreateDeployment,\n          requestBodyName: \"deployment\",\n          contentType: \"application/json; charset=utf-8\"\n        });\n      let statusCode = operationRes.status;\n      if (statusCode !== 201 && statusCode !== 400 && statusCode !== 402 && statusCode !== 409) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = operationRes.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(operationRes);\n        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            let internalError = null;\n            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;\n            error.code = internalError ? internalError.code : parsedErrorResponse.code;\n            error.message = internalError ? internalError.message : parsedErrorResponse.message;\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Fetch a deployment by its ID.\n   *\n   * @param {string} id The ID of the deployment to fetch.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async getWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Deployment>> {\n    let client = this.client;\n    // Validate\n    try {\n      if (id === null || id === undefined || typeof id.valueOf() !== 'string') {\n        throw new Error('id cannot be null or undefined and it must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          id\n        },\n        options);\n      operationRes = await client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.client.baseUri,\n          path: \"v3/deployments/{id}\",\n          urlParameters: [\n            {\n              parameterName: \"id\",\n              mapper: {\n                required: true,\n                serializedName: \"id\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ]\n        });\n      let statusCode = operationRes.status;\n      if (statusCode !== 200 && statusCode !== 400 && statusCode !== 402 && statusCode !== 404) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = operationRes.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(operationRes);\n        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            let internalError = null;\n            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;\n            error.code = internalError ? internalError.code : parsedErrorResponse.code;\n            error.message = internalError ? internalError.message : parsedErrorResponse.message;\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            const resultMapper = Mappers.Deployment;\n            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Delete a deployment by its ID.\n   *\n   * This endpoint doesn't clear the version number of messages already annotated\n   * with this deployment version.\n   *\n   * @param {string} id The ID of the deployment to delete.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async deleteMethodWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n    let client = this.client;\n    // Validate\n    try {\n      if (id === null || id === undefined || typeof id.valueOf() !== 'string') {\n        throw new Error('id cannot be null or undefined and it must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          id\n        },\n        options);\n      operationRes = await client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"DELETE\",\n          baseUrl: this.client.baseUri,\n          path: \"v3/deployments/{id}\",\n          urlParameters: [\n            {\n              parameterName: \"id\",\n              mapper: {\n                required: true,\n                serializedName: \"id\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ]\n        });\n      let statusCode = operationRes.status;\n      if (statusCode !== 204 && statusCode !== 400 && statusCode !== 402 && statusCode !== 404) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = operationRes.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(operationRes);\n        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            let internalError = null;\n            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;\n            error.code = internalError ? internalError.code : parsedErrorResponse.code;\n            error.message = internalError ? internalError.message : parsedErrorResponse.message;\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Fetch a list of deployments.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.Deployment[]} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getAll(): Promise<Models.Deployment[]>;\n  getAll(options: msRest.RequestOptionsBase): Promise<Models.Deployment[]>;\n  getAll(callback: msRest.ServiceCallback<Models.Deployment[]>): void;\n  getAll(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment[]>): void;\n  getAll(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Deployment[]>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Deployment[]>;\n    if (!callback) {\n      return this.getAllWithHttpOperationResponse(options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Deployment[]);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getAllWithHttpOperationResponse(options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Deployment[];\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Create a new deployment.\n   *\n   * @param {CreateDeployment} deployment The deployment object to create.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  create(deployment: Models.CreateDeployment): Promise<void>;\n  create(deployment: Models.CreateDeployment, options: msRest.RequestOptionsBase): Promise<void>;\n  create(deployment: Models.CreateDeployment, callback: msRest.ServiceCallback<void>): void;\n  create(deployment: Models.CreateDeployment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  create(deployment: Models.CreateDeployment, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.createWithHttpOperationResponse(deployment, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.createWithHttpOperationResponse(deployment, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Fetch a deployment by its ID.\n   *\n   * @param {string} id The ID of the deployment to fetch.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.Deployment} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Deployment} for more information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  get(id: string): Promise<Models.Deployment>;\n  get(id: string, options: msRest.RequestOptionsBase): Promise<Models.Deployment>;\n  get(id: string, callback: msRest.ServiceCallback<Models.Deployment>): void;\n  get(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;\n  get(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Deployment>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Deployment>;\n    if (!callback) {\n      return this.getWithHttpOperationResponse(id, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Deployment);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getWithHttpOperationResponse(id, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Deployment;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Delete a deployment by its ID.\n   *\n   * This endpoint doesn't clear the version number of messages already annotated\n   * with this deployment version.\n   *\n   * @param {string} id The ID of the deployment to delete.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  deleteMethod(id: string): Promise<void>;\n  deleteMethod(id: string, options: msRest.RequestOptionsBase): Promise<void>;\n  deleteMethod(id: string, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.deleteMethodWithHttpOperationResponse(id, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(id, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/operations/deployments.ts","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/mappers\";\nimport { ElmahioAPIContext } from \"../elmahioAPIContext\";\n\nconst WebResource = msRest.WebResource;\n\n/** Class representing a Logs. */\nexport class Logs {\n  private readonly client: ElmahioAPIContext;\n  /**\n   * Create a Logs.\n   * @param {ElmahioAPIContext} client Reference to the service client.\n   */\n  constructor(client: ElmahioAPIContext) {\n    this.client = client;\n  }\n\n  /**\n   * @summary Fetch a list of logs.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async getAllWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Log[]>> {\n    let client = this.client;\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments({}, options);\n      operationRes = await client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.client.baseUri,\n          path: \"v3/logs\"\n        });\n      let statusCode = operationRes.status;\n      if (statusCode !== 200 && statusCode !== 401 && statusCode !== 402) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = operationRes.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(operationRes);\n        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            let internalError = null;\n            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;\n            error.code = internalError ? internalError.code : parsedErrorResponse.code;\n            error.message = internalError ? internalError.message : parsedErrorResponse.message;\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            const resultMapper = {\n              serializedName: \"parsedResponse\",\n              type: {\n                name: \"Sequence\",\n                element: {\n                  serializedName: \"LogElementType\",\n                  type: {\n                    name: \"Composite\",\n                    className: \"Log\"\n                  }\n                }\n              }\n            };\n            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Create a new log.\n   *\n   * @param {CreateLog} log The log object to create.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async createWithHttpOperationResponse(log: Models.CreateLog, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n    let client = this.client;\n    // Validate\n    try {\n      if (log === null || log === undefined) {\n        throw new Error('log cannot be null or undefined.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          log\n        },\n        options);\n      operationRes = await client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.client.baseUri,\n          path: \"v3/logs\",\n          requestBodyMapper: Mappers.CreateLog,\n          requestBodyName: \"log\",\n          contentType: \"application/json; charset=utf-8\"\n        });\n      let statusCode = operationRes.status;\n      if (statusCode !== 201 && statusCode !== 401 && statusCode !== 402) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = operationRes.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(operationRes);\n        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            let internalError = null;\n            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;\n            error.code = internalError ? internalError.code : parsedErrorResponse.code;\n            error.message = internalError ? internalError.message : parsedErrorResponse.message;\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Fetch a log by its ID.\n   *\n   * @param {string} id The ID of the log to fetch.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async getWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Log>> {\n    let client = this.client;\n    // Validate\n    try {\n      if (id === null || id === undefined || typeof id.valueOf() !== 'string') {\n        throw new Error('id cannot be null or undefined and it must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          id\n        },\n        options);\n      operationRes = await client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.client.baseUri,\n          path: \"v3/logs/{id}\",\n          urlParameters: [\n            {\n              parameterName: \"id\",\n              mapper: {\n                required: true,\n                serializedName: \"id\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ]\n        });\n      let statusCode = operationRes.status;\n      if (statusCode !== 200 && statusCode !== 401 && statusCode !== 402 && statusCode !== 404) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = operationRes.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(operationRes);\n        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            let internalError = null;\n            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;\n            error.code = internalError ? internalError.code : parsedErrorResponse.code;\n            error.message = internalError ? internalError.message : parsedErrorResponse.message;\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            const resultMapper = Mappers.Log;\n            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Fetch a list of logs.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.Log[]} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getAll(): Promise<Models.Log[]>;\n  getAll(options: msRest.RequestOptionsBase): Promise<Models.Log[]>;\n  getAll(callback: msRest.ServiceCallback<Models.Log[]>): void;\n  getAll(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Log[]>): void;\n  getAll(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Log[]>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Log[]>;\n    if (!callback) {\n      return this.getAllWithHttpOperationResponse(options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Log[]);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getAllWithHttpOperationResponse(options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Log[];\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Create a new log.\n   *\n   * @param {CreateLog} log The log object to create.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  create(log: Models.CreateLog): Promise<void>;\n  create(log: Models.CreateLog, options: msRest.RequestOptionsBase): Promise<void>;\n  create(log: Models.CreateLog, callback: msRest.ServiceCallback<void>): void;\n  create(log: Models.CreateLog, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  create(log: Models.CreateLog, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.createWithHttpOperationResponse(log, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.createWithHttpOperationResponse(log, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Fetch a log by its ID.\n   *\n   * @param {string} id The ID of the log to fetch.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.Log} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Log} for more information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  get(id: string): Promise<Models.Log>;\n  get(id: string, options: msRest.RequestOptionsBase): Promise<Models.Log>;\n  get(id: string, callback: msRest.ServiceCallback<Models.Log>): void;\n  get(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Log>): void;\n  get(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Log>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Log>;\n    if (!callback) {\n      return this.getWithHttpOperationResponse(id, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Log);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getWithHttpOperationResponse(id, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Log;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/operations/logs.ts","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/mappers\";\nimport { ElmahioAPIContext } from \"../elmahioAPIContext\";\n\nconst WebResource = msRest.WebResource;\n\n/** Class representing a Messages. */\nexport class Messages {\n  private readonly client: ElmahioAPIContext;\n  /**\n   * Create a Messages.\n   * @param {ElmahioAPIContext} client Reference to the service client.\n   */\n  constructor(client: ElmahioAPIContext) {\n    this.client = client;\n  }\n\n  /**\n   * @summary Fetch messages from a log.\n   *\n   * @param {string} logId The ID of the log containing the messages.\n   *\n   * @param {MessagesGetAllOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async getAllWithHttpOperationResponse(logId: string, options?: Models.MessagesGetAllOptionalParams): Promise<msRest.HttpOperationResponse<Models.MessagesResult>> {\n    let client = this.client;\n    let pageIndex = (options && options.pageIndex !== undefined) ? options.pageIndex : undefined;\n    let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;\n    let query = (options && options.query !== undefined) ? options.query : undefined;\n    let from = (options && options.from !== undefined) ? options.from : undefined;\n    let to = (options && options.to !== undefined) ? options.to : undefined;\n    let includeHeaders = (options && options.includeHeaders !== undefined) ? options.includeHeaders : undefined;\n    // Validate\n    try {\n      if (logId === null || logId === undefined || typeof logId.valueOf() !== 'string') {\n        throw new Error('logId cannot be null or undefined and it must be of type string.');\n      }\n      if (pageIndex !== null && pageIndex !== undefined && typeof pageIndex !== 'number') {\n        throw new Error('pageIndex must be of type number.');\n      }\n      if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {\n        throw new Error('pageSize must be of type number.');\n      }\n      if (query !== null && query !== undefined && typeof query.valueOf() !== 'string') {\n        throw new Error('query must be of type string.');\n      }\n      if (from && !(from instanceof Date ||\n          (typeof (from as string).valueOf() === 'string' && !isNaN(Date.parse(from as string))))) {\n            throw new Error('from must be of type date.');\n          }\n      if (to && !(to instanceof Date ||\n          (typeof (to as string).valueOf() === 'string' && !isNaN(Date.parse(to as string))))) {\n            throw new Error('to must be of type date.');\n          }\n      if (includeHeaders !== null && includeHeaders !== undefined && typeof includeHeaders !== 'boolean') {\n        throw new Error('includeHeaders must be of type boolean.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          logId,\n          pageIndex,\n          pageSize,\n          query,\n          from,\n          to,\n          includeHeaders\n        },\n        options);\n      operationRes = await client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.client.baseUri,\n          path: \"v3/messages/{logId}\",\n          urlParameters: [\n            {\n              parameterName: \"logId\",\n              mapper: {\n                required: true,\n                serializedName: \"logId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          queryParameters: [\n            {\n              parameterName: \"pageIndex\",\n              mapper: {\n                serializedName: \"pageIndex\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterName: \"pageSize\",\n              mapper: {\n                serializedName: \"pageSize\",\n                type: {\n                  name: \"Number\"\n                }\n              }\n            },\n            {\n              parameterName: \"query\",\n              mapper: {\n                serializedName: \"query\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterName: \"from\",\n              mapper: {\n                serializedName: \"from\",\n                type: {\n                  name: \"DateTime\"\n                }\n              }\n            },\n            {\n              parameterName: \"to\",\n              mapper: {\n                serializedName: \"to\",\n                type: {\n                  name: \"DateTime\"\n                }\n              }\n            },\n            {\n              parameterName: \"includeHeaders\",\n              mapper: {\n                serializedName: \"includeHeaders\",\n                type: {\n                  name: \"Boolean\"\n                }\n              }\n            }\n          ]\n        });\n      let statusCode = operationRes.status;\n      if (statusCode !== 200 && statusCode !== 400 && statusCode !== 401 && statusCode !== 429) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = operationRes.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(operationRes);\n        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            let internalError = null;\n            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;\n            error.code = internalError ? internalError.code : parsedErrorResponse.code;\n            error.message = internalError ? internalError.message : parsedErrorResponse.message;\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            const resultMapper = Mappers.MessagesResult;\n            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Create a new message.\n   *\n   * @param {string} logId The ID of the log which should contain the new\n   * message.\n   *\n   * @param {CreateMessage} message The message object to create.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async createWithHttpOperationResponse(logId: string, message: Models.CreateMessage, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n    let client = this.client;\n    // Validate\n    try {\n      if (logId === null || logId === undefined || typeof logId.valueOf() !== 'string') {\n        throw new Error('logId cannot be null or undefined and it must be of type string.');\n      }\n      if (message === null || message === undefined) {\n        throw new Error('message cannot be null or undefined.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          logId,\n          message\n        },\n        options);\n      operationRes = await client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.client.baseUri,\n          path: \"v3/messages/{logId}\",\n          urlParameters: [\n            {\n              parameterName: \"logId\",\n              mapper: {\n                required: true,\n                serializedName: \"logId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBodyMapper: Mappers.CreateMessage,\n          requestBodyName: \"message\",\n          contentType: \"application/json; charset=utf-8\"\n        });\n      let statusCode = operationRes.status;\n      if (statusCode !== 200 && statusCode !== 201 && statusCode !== 400 && statusCode !== 401 && statusCode !== 403 && statusCode !== 404 && statusCode !== 413 && statusCode !== 429) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = operationRes.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(operationRes);\n        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            let internalError = null;\n            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;\n            error.code = internalError ? internalError.code : parsedErrorResponse.code;\n            error.message = internalError ? internalError.message : parsedErrorResponse.message;\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Deletes a list of messages by logid and query.\n   *\n   * @param {string} logId The ID of the log containing the message.\n   *\n   * @param {Search} search A search object containing query, time filters etc.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async deleteAllWithHttpOperationResponse(logId: string, search: Models.Search, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n    let client = this.client;\n    // Validate\n    try {\n      if (logId === null || logId === undefined || typeof logId.valueOf() !== 'string') {\n        throw new Error('logId cannot be null or undefined and it must be of type string.');\n      }\n      if (search === null || search === undefined) {\n        throw new Error('search cannot be null or undefined.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          logId,\n          search\n        },\n        options);\n      operationRes = await client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"DELETE\",\n          baseUrl: this.client.baseUri,\n          path: \"v3/messages/{logId}\",\n          urlParameters: [\n            {\n              parameterName: \"logId\",\n              mapper: {\n                required: true,\n                serializedName: \"logId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ],\n          requestBodyMapper: Mappers.Search,\n          requestBodyName: \"search\",\n          contentType: \"application/json; charset=utf-8\"\n        });\n      let statusCode = operationRes.status;\n      if (statusCode !== 200 && statusCode !== 400 && statusCode !== 401 && statusCode !== 404 && statusCode !== 429) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = operationRes.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(operationRes);\n        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            let internalError = null;\n            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;\n            error.code = internalError ? internalError.code : parsedErrorResponse.code;\n            error.message = internalError ? internalError.message : parsedErrorResponse.message;\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Fetch a message by its ID.\n   *\n   * @param {string} id The ID of the message to fetch.\n   *\n   * @param {string} logId The ID of the log containing the message.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async getWithHttpOperationResponse(id: string, logId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Message>> {\n    let client = this.client;\n    // Validate\n    try {\n      if (id === null || id === undefined || typeof id.valueOf() !== 'string') {\n        throw new Error('id cannot be null or undefined and it must be of type string.');\n      }\n      if (logId === null || logId === undefined || typeof logId.valueOf() !== 'string') {\n        throw new Error('logId cannot be null or undefined and it must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          id,\n          logId\n        },\n        options);\n      operationRes = await client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"GET\",\n          baseUrl: this.client.baseUri,\n          path: \"v3/messages/{logId}/{id}\",\n          urlParameters: [\n            {\n              parameterName: \"id\",\n              mapper: {\n                required: true,\n                serializedName: \"id\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterName: \"logId\",\n              mapper: {\n                required: true,\n                serializedName: \"logId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ]\n        });\n      let statusCode = operationRes.status;\n      if (statusCode !== 200 && statusCode !== 400 && statusCode !== 401 && statusCode !== 404 && statusCode !== 429) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = operationRes.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(operationRes);\n        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            let internalError = null;\n            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;\n            error.code = internalError ? internalError.code : parsedErrorResponse.code;\n            error.message = internalError ? internalError.message : parsedErrorResponse.message;\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            const resultMapper = Mappers.Message;\n            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(operationRes);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Delete a message by its ID.\n   *\n   * @param {string} id The ID of the message to delete.\n   *\n   * @param {string} logId The ID of the log containing the message.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async deleteMethodWithHttpOperationResponse(id: string, logId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n    let client = this.client;\n    // Validate\n    try {\n      if (id === null || id === undefined || typeof id.valueOf() !== 'string') {\n        throw new Error('id cannot be null or undefined and it must be of type string.');\n      }\n      if (logId === null || logId === undefined || typeof logId.valueOf() !== 'string') {\n        throw new Error('logId cannot be null or undefined and it must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          id,\n          logId\n        },\n        options);\n      operationRes = await client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"DELETE\",\n          baseUrl: this.client.baseUri,\n          path: \"v3/messages/{logId}/{id}\",\n          urlParameters: [\n            {\n              parameterName: \"id\",\n              mapper: {\n                required: true,\n                serializedName: \"id\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterName: \"logId\",\n              mapper: {\n                required: true,\n                serializedName: \"logId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ]\n        });\n      let statusCode = operationRes.status;\n      if (statusCode !== 200 && statusCode !== 400 && statusCode !== 401 && statusCode !== 404 && statusCode !== 429) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = operationRes.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(operationRes);\n        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            let internalError = null;\n            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;\n            error.code = internalError ? internalError.code : parsedErrorResponse.code;\n            error.message = internalError ? internalError.message : parsedErrorResponse.message;\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Hide a message by its ID.\n   *\n   * @param {string} id The ID of the message to hide.\n   *\n   * @param {string} logId The ID of the log containing the message.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async hideWithHttpOperationResponse(id: string, logId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {\n    let client = this.client;\n    // Validate\n    try {\n      if (id === null || id === undefined || typeof id.valueOf() !== 'string') {\n        throw new Error('id cannot be null or undefined and it must be of type string.');\n      }\n      if (logId === null || logId === undefined || typeof logId.valueOf() !== 'string') {\n        throw new Error('logId cannot be null or undefined and it must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Create HTTP transport objects\n    const httpRequest = new WebResource();\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(\n        {\n          id,\n          logId\n        },\n        options);\n      operationRes = await client.sendOperationRequest(\n        httpRequest,\n        operationArguments,\n        {\n          httpMethod: \"POST\",\n          baseUrl: this.client.baseUri,\n          path: \"v3/messages/{logId}/{id}/_hide\",\n          urlParameters: [\n            {\n              parameterName: \"id\",\n              mapper: {\n                required: true,\n                serializedName: \"id\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            },\n            {\n              parameterName: \"logId\",\n              mapper: {\n                required: true,\n                serializedName: \"logId\",\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          ]\n        });\n      let statusCode = operationRes.status;\n      if (statusCode !== 200 && statusCode !== 400 && statusCode !== 401 && statusCode !== 404 && statusCode !== 429) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = operationRes.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(operationRes);\n        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            let internalError = null;\n            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;\n            error.code = internalError ? internalError.code : parsedErrorResponse.code;\n            error.message = internalError ? internalError.message : parsedErrorResponse.message;\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Fetch messages from a log.\n   *\n   * @param {string} logId The ID of the log containing the messages.\n   *\n   * @param {MessagesGetAllOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.MessagesResult} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.MessagesResult} for more information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getAll(logId: string): Promise<Models.MessagesResult>;\n  getAll(logId: string, options: Models.MessagesGetAllOptionalParams): Promise<Models.MessagesResult>;\n  getAll(logId: string, callback: msRest.ServiceCallback<Models.MessagesResult>): void;\n  getAll(logId: string, options: Models.MessagesGetAllOptionalParams, callback: msRest.ServiceCallback<Models.MessagesResult>): void;\n  getAll(logId: string, options?: Models.MessagesGetAllOptionalParams, callback?: msRest.ServiceCallback<Models.MessagesResult>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.MessagesResult>;\n    if (!callback) {\n      return this.getAllWithHttpOperationResponse(logId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.MessagesResult);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getAllWithHttpOperationResponse(logId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.MessagesResult;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Create a new message.\n   *\n   * @param {string} logId The ID of the log which should contain the new\n   * message.\n   *\n   * @param {CreateMessage} message The message object to create.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  create(logId: string, message: Models.CreateMessage): Promise<void>;\n  create(logId: string, message: Models.CreateMessage, options: msRest.RequestOptionsBase): Promise<void>;\n  create(logId: string, message: Models.CreateMessage, callback: msRest.ServiceCallback<void>): void;\n  create(logId: string, message: Models.CreateMessage, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  create(logId: string, message: Models.CreateMessage, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.createWithHttpOperationResponse(logId, message, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.createWithHttpOperationResponse(logId, message, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Deletes a list of messages by logid and query.\n   *\n   * @param {string} logId The ID of the log containing the message.\n   *\n   * @param {Search} search A search object containing query, time filters etc.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  deleteAll(logId: string, search: Models.Search): Promise<void>;\n  deleteAll(logId: string, search: Models.Search, options: msRest.RequestOptionsBase): Promise<void>;\n  deleteAll(logId: string, search: Models.Search, callback: msRest.ServiceCallback<void>): void;\n  deleteAll(logId: string, search: Models.Search, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteAll(logId: string, search: Models.Search, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.deleteAllWithHttpOperationResponse(logId, search, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.deleteAllWithHttpOperationResponse(logId, search, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Fetch a message by its ID.\n   *\n   * @param {string} id The ID of the message to fetch.\n   *\n   * @param {string} logId The ID of the log containing the message.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.Message} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Message} for more information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  get(id: string, logId: string): Promise<Models.Message>;\n  get(id: string, logId: string, options: msRest.RequestOptionsBase): Promise<Models.Message>;\n  get(id: string, logId: string, callback: msRest.ServiceCallback<Models.Message>): void;\n  get(id: string, logId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Message>): void;\n  get(id: string, logId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Message>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Message>;\n    if (!callback) {\n      return this.getWithHttpOperationResponse(id, logId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as Models.Message);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getWithHttpOperationResponse(id, logId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as Models.Message;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Delete a message by its ID.\n   *\n   * @param {string} id The ID of the message to delete.\n   *\n   * @param {string} logId The ID of the log containing the message.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  deleteMethod(id: string, logId: string): Promise<void>;\n  deleteMethod(id: string, logId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  deleteMethod(id: string, logId: string, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(id: string, logId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(id: string, logId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.deleteMethodWithHttpOperationResponse(id, logId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(id, logId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n  /**\n   * @summary Hide a message by its ID.\n   *\n   * @param {string} id The ID of the message to hide.\n   *\n   * @param {string} logId The ID of the log containing the message.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, operationRes)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.\n   */\n  hide(id: string, logId: string): Promise<void>;\n  hide(id: string, logId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  hide(id: string, logId: string, callback: msRest.ServiceCallback<void>): void;\n  hide(id: string, logId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  hide(id: string, logId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.hideWithHttpOperationResponse(id, logId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.parsedBody as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.hideWithHttpOperationResponse(id, logId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.parsedBody as void;\n        return cb(err, result, data.request, data);\n      });\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/operations/messages.ts","/*\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\nimport * as Mappers from \"./models/mappers\";\n\nconst packageName = \"elmah.io.client.js\";\nconst packageVersion = \"3.0.0\";\n\nexport class ElmahioAPIContext extends msRest.ServiceClient {\n  credentials: msRest.ServiceClientCredentials;\n  baseUri: string;\n  serializer: msRest.Serializer;\n\n  /**\n   * @class\n   * Initializes a new instance of the ElmahioAPIContext class.\n   * @constructor\n   *\n   * @param {msRest.ServiceClientCredentials} credentials - Subscription credentials which uniquely identify client subscription.\n   *\n   * @param {string} [baseUri] - The base URI of the service.\n   *\n   * @param {object} [options] - The parameter options\n   *\n   * @param {Array} [options.filters] - Filters to be added to the request pipeline\n   *\n   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at\n   * {@link https://github.github.io/fetch/#Request Options doc}\n   *\n   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy\n   *\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, baseUri?: string, options?: msRest.ServiceClientOptions) {\n    if (credentials === null || credentials === undefined) {\n      throw new Error('\\'credentials\\' cannot be null.');\n    }\n\n    if (!options) {\n      options = {};\n    }\n    if (!options.serializer) {\n      options = {\n        ...options,\n        serializer: new msRest.Serializer(Mappers, false)\n      };\n    }\n\n    super(credentials, options);\n\n    this.baseUri = baseUri as string;\n    if (!this.baseUri) {\n      this.baseUri = \"https://api.elmah.io\";\n    }\n    this.credentials = credentials;\n\n    this.addUserAgentInfo(`${packageName}/${packageVersion}`);\n    this.serializer = new msRest.Serializer(Mappers, false);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/elmahioAPIContext.ts"],"sourceRoot":""}