/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";


/**
 * @interface
 * An interface representing Deployment.
 */
export interface Deployment {
  /**
   * @member {string} [id] The ID of this deployment.
   */
  id?: string;
  /**
   * @member {string} [version] The version number of this deployment. The
   * value of version can be a SemVer compliant string or any other
   * syntax that you are using as your version numbering scheme.
   */
  version?: string;
  /**
   * @member {Date} [created] When was this deployment created.
   */
  created?: Date;
  /**
   * @member {string} [createdBy] The elmah.io id of the user creating this
   * deployment. Since deployments are created on a subscription,
   * the CreatedBy will contain the id of the user with the subscription.
   */
  createdBy?: string;
  /**
   * @member {string} [description] Sescription of this deployment in markdown
   * or clear text.
   */
  description?: string;
  /**
   * @member {string} [userName] The name of the person responsible for
   * creating this deployment.
   */
  userName?: string;
  /**
   * @member {string} [userEmail] The email of the person responsible for
   * creating this deployment.
   */
  userEmail?: string;
  /**
   * @member {string} [logId] If the deployment is attached a single log, this
   * property is set to the ID of that log.
   * If null, the deployment is attached all logs on the organization.
   */
  logId?: string;
}

/**
 * @interface
 * An interface representing CreateDeployment.
 */
export interface CreateDeployment {
  /**
   * @member {string} version The version number of this deployment. The value
   * of version can be a SemVer compliant string or any other
   * syntax that you are using as your version numbering scheme.
   */
  version: string;
  /**
   * @member {Date} [created] When was this deployment created in UTC. Defaults
   * to current time if not specified.
   */
  created?: Date;
  /**
   * @member {string} [description] Optional description of this deployment.
   * Can be markdown or clear text.
   */
  description?: string;
  /**
   * @member {string} [userName] The name of the person responsible for
   * creating this deployment. This can be the name taken from
   * your deployment server (like VSTS or Octopus).
   */
  userName?: string;
  /**
   * @member {string} [userEmail] The email of the person responsible for
   * creating this deployment. This can be the email taken from
   * your deployment server (like VSTS or Octopus).
   */
  userEmail?: string;
  /**
   * @member {string} [logId] As default, deployments are attached all logs of
   * the organization. If you want a deployment to
   * attach to a single log only, set this to the ID of that log.
   */
  logId?: string;
}

/**
 * @interface
 * An interface representing Log.
 */
export interface Log {
  /**
   * @member {string} [id] ID of the log.
   */
  id?: string;
  /**
   * @member {string} [name] Name of the log.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing CreateLog.
 */
export interface CreateLog {
  /**
   * @member {string} [name] Name of the new log.
   */
  name?: string;
}

/**
 * @interface
 * An interface representing Item.
 * Represents a key value pair.
 *
 */
export interface Item {
  /**
   * @member {string} [key] The key of the item.
   */
  key?: string;
  /**
   * @member {string} [value] The value of the item.
   */
  value?: string;
}

/**
 * @interface
 * An interface representing MessageOverview.
 */
export interface MessageOverview {
  /**
   * @member {string} [id] The ID of this message.
   */
  id?: string;
  /**
   * @member {string} [application] Used to identify which application logged
   * this message. You can use this if you have multiple applications and
   * services logging to the same log
   */
  application?: string;
  /**
   * @member {string} [detail] A longer description of the message. For errors
   * this could be a stacktrace, but it's really up to you what to log in
   * there.
   */
  detail?: string;
  /**
   * @member {string} [hostname] The hostname of the server logging the
   * message.
   */
  hostname?: string;
  /**
   * @member {string} [title] The textual title or headline of the message to
   * log.
   */
  title?: string;
  /**
   * @member {string} [source] The source of the code logging the message. This
   * could be the assembly name.
   */
  source?: string;
  /**
   * @member {number} [statusCode] If the message logged relates to a HTTP
   * status code, you can put the code in this property. This would probably
   * only be relevant for errors,
   * but could be used for logging successful status codes as well.
   */
  statusCode?: number;
  /**
   * @member {Date} [dateTime] The date and time in UTC of the message. If you
   * don't provide us with a value in dateTime, we will set the current date
   * and time in UTC.
   */
  dateTime?: Date;
  /**
   * @member {string} [type] The type of message. If logging an error, the type
   * of the exception would go into type but you can put anything in there,
   * that makes sense for your domain.
   */
  type?: string;
  /**
   * @member {string} [user] An identification of the user triggering this
   * message. You can put the users email address or your user key into this
   * property.
   */
  user?: string;
  /**
   * @member {string} [severity] An enum value representing the severity of
   * this message. The following values are allowed: Verbose, Debug,
   * Information, Warning, Error, Fatal
   */
  severity?: string;
  /**
   * @member {string} [url] If message relates to a HTTP request, you may send
   * the URL of that request. If you don't provide us with an URL, we will try
   * to find a key named URL in serverVariables.
   */
  url?: string;
  /**
   * @member {string} [method] If message relates to a HTTP request, you may
   * send the HTTP method of that request. If you don't provide us with a
   * method, we will try to find a key named REQUEST_METHOD in serverVariables.
   */
  method?: string;
  /**
   * @member {string} [version] Versions can be used to distinguish messages
   * from different versions of your software. The value of version can be a
   * SemVer compliant string or any other
   * syntax that you are using as your version numbering scheme.
   */
  version?: string;
  /**
   * @member {Item[]} [cookies] A key/value pair of cookies. This property only
   * makes sense for logging messages related to web requests.
   */
  cookies?: Item[];
  /**
   * @member {Item[]} [form] A key/value pair of form fields and their values.
   * This property makes sense if logging message related to users inputting
   * data in a form.
   */
  form?: Item[];
  /**
   * @member {Item[]} [queryString] A key/value pair of query string
   * parameters. This property makes sense if logging message related to a HTTP
   * request.
   */
  queryString?: Item[];
  /**
   * @member {Item[]} [serverVariables] A key/value pair of server values.
   * Server variables are typically related to handling requests in a webserver
   * but could be used for other types of information as well.
   */
  serverVariables?: Item[];
  /**
   * @member {Item[]} [data] A key/value pair of user-defined fields and their
   * values. When logging an exception, the Data dictionary of
   * the exception is copied to this property. You can add additional key/value
   * pairs, by modifying the Data
   * dictionary on the exception or by supplying additional key/values to this
   * API.
   */
  data?: Item[];
}

/**
 * @interface
 * An interface representing MessagesResult.
 */
export interface MessagesResult {
  /**
   * @member {MessageOverview[]} [messages] Log messages.
   */
  messages?: MessageOverview[];
  /**
   * @member {number} [total] The total number of log messages found.
   */
  total?: number;
}

/**
 * @interface
 * An interface representing Search.
 */
export interface Search {
  /**
   * @member {string} [query] Lucene query.
   */
  query?: string;
  /**
   * @member {Date} [from] Search from this date.
   */
  from?: Date;
  /**
   * @member {Date} [to] Search to this date.
   */
  to?: Date;
}

/**
 * @interface
 * An interface representing CreateMessage.
 */
export interface CreateMessage {
  /**
   * @member {string} [application] Used to identify which application logged
   * this message. You can use this if you have multiple applications and
   * services logging to the same log
   */
  application?: string;
  /**
   * @member {string} [detail] A longer description of the message. For errors
   * this could be a stacktrace, but it's really up to you what to log in
   * there.
   */
  detail?: string;
  /**
   * @member {string} [hostname] The hostname of the server logging the
   * message.
   */
  hostname?: string;
  /**
   * @member {string} [title] The textual title or headline of the message to
   * log.
   */
  title?: string;
  /**
   * @member {string} [source] The source of the code logging the message. This
   * could be the assembly name.
   */
  source?: string;
  /**
   * @member {number} [statusCode] If the message logged relates to a HTTP
   * status code, you can put the code in this property. This would probably
   * only be relevant for errors,
   * but could be used for logging successful status codes as well.
   */
  statusCode?: number;
  /**
   * @member {Date} [dateTime] The date and time in UTC of the message. If you
   * don't provide us with a value in dateTime, we will set the current date
   * and time in UTC.
   */
  dateTime?: Date;
  /**
   * @member {string} [type] The type of message. If logging an error, the type
   * of the exception would go into type but you can put anything in there,
   * that makes sense for your domain.
   */
  type?: string;
  /**
   * @member {string} [user] An identification of the user triggering this
   * message. You can put the users email address or your user key into this
   * property.
   */
  user?: string;
  /**
   * @member {string} [severity] An enum value representing the severity of
   * this message. The following values are allowed: Verbose, Debug,
   * Information, Warning, Error, Fatal
   */
  severity?: string;
  /**
   * @member {string} [url] If message relates to a HTTP request, you may send
   * the URL of that request. If you don't provide us with an URL, we will try
   * to find a key named URL in serverVariables.
   */
  url?: string;
  /**
   * @member {string} [method] If message relates to a HTTP request, you may
   * send the HTTP method of that request. If you don't provide us with a
   * method, we will try to find a key named REQUEST_METHOD in serverVariables.
   */
  method?: string;
  /**
   * @member {string} [version] Versions can be used to distinguish messages
   * from different versions of your software. The value of version can be a
   * SemVer compliant string or any other
   * syntax that you are using as your version numbering scheme.
   */
  version?: string;
  /**
   * @member {Item[]} [cookies] A key/value pair of cookies. This property only
   * makes sense for logging messages related to web requests.
   */
  cookies?: Item[];
  /**
   * @member {Item[]} [form] A key/value pair of form fields and their values.
   * This property makes sense if logging message related to users inputting
   * data in a form.
   */
  form?: Item[];
  /**
   * @member {Item[]} [queryString] A key/value pair of query string
   * parameters. This property makes sense if logging message related to a HTTP
   * request.
   */
  queryString?: Item[];
  /**
   * @member {Item[]} [serverVariables] A key/value pair of server values.
   * Server variables are typically related to handling requests in a webserver
   * but could be used for other types of information as well.
   */
  serverVariables?: Item[];
  /**
   * @member {Item[]} [data] A key/value pair of user-defined fields and their
   * values. When logging an exception, the Data dictionary of
   * the exception is copied to this property. You can add additional key/value
   * pairs, by modifying the Data
   * dictionary on the exception or by supplying additional key/values to this
   * API.
   */
  data?: Item[];
}

/**
 * @interface
 * An interface representing Message.
 */
export interface Message {
  /**
   * @member {string} [id] The ID of this message.
   */
  id?: string;
  /**
   * @member {string} [application] Used to identify which application logged
   * this message. You can use this if you have multiple applications and
   * services logging to the same log
   */
  application?: string;
  /**
   * @member {string} [detail] A longer description of the message. For errors
   * this could be a stacktrace, but it's really up to you what to log in
   * there.
   */
  detail?: string;
  /**
   * @member {string} [hostname] The hostname of the server logging the
   * message.
   */
  hostname?: string;
  /**
   * @member {string} [title] The textual title or headline of the message to
   * log.
   */
  title?: string;
  /**
   * @member {string} [source] The source of the code logging the message. This
   * could be the assembly name.
   */
  source?: string;
  /**
   * @member {number} [statusCode] If the message logged relates to a HTTP
   * status code, you can put the code in this property. This would probably
   * only be relevant for errors,
   * but could be used for logging successful status codes as well.
   */
  statusCode?: number;
  /**
   * @member {Date} [dateTime] The date and time in UTC of the message. If you
   * don't provide us with a value in dateTime, we will set the current date
   * and time in UTC.
   */
  dateTime?: Date;
  /**
   * @member {string} [type] The type of message. If logging an error, the type
   * of the exception would go into type but you can put anything in there,
   * that makes sense for your domain.
   */
  type?: string;
  /**
   * @member {string} [user] An identification of the user triggering this
   * message. You can put the users email address or your user key into this
   * property.
   */
  user?: string;
  /**
   * @member {string} [severity] An enum value representing the severity of
   * this message. The following values are allowed: Verbose, Debug,
   * Information, Warning, Error, Fatal
   */
  severity?: string;
  /**
   * @member {string} [url] If message relates to a HTTP request, you may send
   * the URL of that request. If you don't provide us with an URL, we will try
   * to find a key named URL in serverVariables.
   */
  url?: string;
  /**
   * @member {string} [method] If message relates to a HTTP request, you may
   * send the HTTP method of that request. If you don't provide us with a
   * method, we will try to find a key named REQUEST_METHOD in serverVariables.
   */
  method?: string;
  /**
   * @member {string} [version] Versions can be used to distinguish messages
   * from different versions of your software. The value of version can be a
   * SemVer compliant string or any other
   * syntax that you are using as your version numbering scheme.
   */
  version?: string;
  /**
   * @member {Item[]} [cookies] A key/value pair of cookies. This property only
   * makes sense for logging messages related to web requests.
   */
  cookies?: Item[];
  /**
   * @member {Item[]} [form] A key/value pair of form fields and their values.
   * This property makes sense if logging message related to users inputting
   * data in a form.
   */
  form?: Item[];
  /**
   * @member {Item[]} [queryString] A key/value pair of query string
   * parameters. This property makes sense if logging message related to a HTTP
   * request.
   */
  queryString?: Item[];
  /**
   * @member {Item[]} [serverVariables] A key/value pair of server values.
   * Server variables are typically related to handling requests in a webserver
   * but could be used for other types of information as well.
   */
  serverVariables?: Item[];
  /**
   * @member {Item[]} [data] A key/value pair of user-defined fields and their
   * values. When logging an exception, the Data dictionary of
   * the exception is copied to this property. You can add additional key/value
   * pairs, by modifying the Data
   * dictionary on the exception or by supplying additional key/values to this
   * API.
   */
  data?: Item[];
}

/**
 * @interface
 * An interface representing MessagesGetAllOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface MessagesGetAllOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [pageIndex] The page number of the result.
   */
  pageIndex?: number;
  /**
   * @member {number} [pageSize] The number of messages to load (max 100) or 15
   * if not set.
   */
  pageSize?: number;
  /**
   * @member {string} [query] A full-text or Lucene query to limit the messages
   * by.
   */
  query?: string;
  /**
   * @member {Date} [from] A start date and time to search from (not included).
   */
  from?: Date;
  /**
   * @member {Date} [to] An end date and time to search to (not included).
   */
  to?: Date;
  /**
   * @member {boolean} [includeHeaders] Include headers like server variables
   * and cookies in the result (slower).
   */
  includeHeaders?: boolean;
}
